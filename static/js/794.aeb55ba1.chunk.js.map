{"version":3,"file":"static/js/794.aeb55ba1.chunk.js","mappings":"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","sources":["components/InfoWindowCard.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\r\n\r\n/**\r\n * Display a card for a selected store on the map.\r\n * This component: \r\n * displays store information \r\n * provides a link for Google Maps directions\r\n * includes ability to save stores to a database.\r\n * @param {object} props - The component's props.\r\n * @param {object} props.marker - The selected store marker object.\r\n * @param {Function} props.onClose - Function to call when the info window is closed.\r\n * @param {string} props.directionsUrl - The URL for Google Maps directions.\r\n */\r\n\r\nconst isDev = window.location.hostname === \"localhost\";\r\nconst BASE_URL = isDev\r\n  ? \"http://localhost:5000\"\r\n  : \"https://guitar-store-locator.onrender.com\";\r\n\r\nconst InfoWindowCard = ({ marker, onClose, directionsUrl }) => {\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [saveMessage, setSaveMessage] = useState(\"\");\r\n\r\n  // store in mongoDB\r\n  const handleSaveStore = useCallback(async () => {\r\n    setIsSaving(true);\r\n    setSaveMessage(\"\");\r\n\r\n    try {\r\n      const placeId = marker.place_id || marker.placeId;\r\n      const name = marker.name;\r\n      const address = marker.vicinity || marker.address;\r\n      const phone = marker.formatted_phone_number || marker.phone;\r\n      const website = marker.website;\r\n      const opening_hours = marker.opening_hours;\r\n\r\n      let latitude, longitude;\r\n      if (marker.source === \"google\") {\r\n        latitude = marker.geometry.location.lat;\r\n        longitude = marker.geometry.location.lng;\r\n      } else if (marker.source === \"mongodb\") {\r\n        latitude = marker.location.coordinates[1];\r\n        longitude = marker.location.coordinates[0];\r\n      } else {\r\n        if (marker.geometry && marker.geometry.location) {\r\n          latitude = marker.geometry.location.lat;\r\n          longitude = marker.geometry.location.lng;\r\n        } else {\r\n          console.error(\"Could not determine coordinates for saving.\");\r\n          setSaveMessage(\"Error: Could not determine store location.\");\r\n          setIsSaving(false);\r\n          return;\r\n        }\r\n      }\r\n\r\n      const postData = {\r\n        placeId,\r\n        name,\r\n        address,\r\n        phone,\r\n        website,\r\n        latitude,\r\n        longitude,\r\n        opening_hours,\r\n      };\r\n\r\n      const response = await fetch(`${BASE_URL}/api/stores`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(postData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(\r\n          errorData.message || `HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Store saved successfully:\", data);\r\n      setSaveMessage(\"Store saved successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error saving store:\", error);\r\n      if (error.message.includes(\"Store with this Place ID already exists\")) {\r\n        setSaveMessage(\"This store is already saved!\");\r\n      } else {\r\n        setSaveMessage(\r\n          `Failed to save store: ${error.message || \"Unknown error\"}`\r\n        );\r\n      }\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  }, [marker]);\r\n\r\n  const showSaveButton = marker.source === \"google\";\r\n\r\n  return (\r\n    <div className=\"info-window\">\r\n      <button className=\"close-btn\" onClick={onClose}>\r\n        Ã—\r\n      </button>\r\n      <h3>{marker.name}</h3>\r\n      <p>{marker.vicinity || marker.address || \"No address available\"}</p>\r\n      {marker.opening_hours?.open_now !== undefined && (\r\n        <p>\r\n          <strong>Open?</strong> {marker.opening_hours.open_now ? \"Yes\" : \"No\"}\r\n        </p>\r\n      )}\r\n      {marker.phone && <p>Phone: {marker.phone}</p>}\r\n      {marker.website && (\r\n        <p>\r\n          <a href={marker.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            Website\r\n          </a>\r\n        </p>\r\n      )}\r\n\r\n      <a\r\n        className=\"store-directions-link\"\r\n        href={directionsUrl}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Directions\r\n      </a>\r\n\r\n      {showSaveButton && (\r\n        <div>\r\n          <button\r\n            className=\"save-to-stores-button\"\r\n            onClick={handleSaveStore}\r\n            disabled={isSaving}\r\n          >\r\n            {isSaving ? \"Saving...\" : \"Save to My Stores\"}\r\n          </button>\r\n          {saveMessage && <p className=\"save-message\">{saveMessage}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoWindowCard;\r\n"],"names":["BASE_URL","window","location","hostname","_ref","_marker$opening_hours","marker","onClose","directionsUrl","isSaving","setIsSaving","useState","saveMessage","setSaveMessage","handleSaveStore","useCallback","async","placeId","place_id","name","address","vicinity","phone","formatted_phone_number","website","opening_hours","latitude","longitude","source","geometry","lat","lng","coordinates","console","error","postData","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","status","data","log","includes","showSaveButton","_jsxs","className","children","_jsx","onClick","undefined","open_now","href","target","rel","disabled"],"sourceRoot":""}