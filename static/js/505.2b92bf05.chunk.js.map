{"version":3,"file":"static/js/505.2b92bf05.chunk.js","mappings":"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","sources":["utils/locationErrorMessages.js","hooks/useTrackLocation.js","hooks/useNearbyStores.js","utils/debounce.js","icons/GuitarIcon.js","icons/UserIcon.js","utils/customClusterRenderer.js","hooks/useMarkers.js","components/StoreErrorMessages.js","components/Maps.js"],"sourcesContent":["/**\r\n * Returns a specific message based on the Geolocation API's error code.\r\n * @param {number} errorCode - The error code provided by the Geolocation API.\r\n * @returns {string} A user-friendly error message.\r\n * // GeolocationPositionErrors commented out to not rely on window object\r\n */\r\nexport const getLocationErrorMessage = (errorCode) => {\r\n  switch (errorCode) {\r\n    case 1: // GeolocationPositionError.PERMISSION_DENIED\r\n      return \"Location access denied. Please enable your location in the browser.\";\r\n    case 2: // GeolocationPositionError.POSITION_UNAVAILABLE\r\n      return \"Your location information is unavailable. Please check device settings.\";\r\n    case 3: // GeolocationPositionError.TIMEOUT\r\n      return \"Timed out while trying to retrieve your location. Please try again.\";\r\n    default:\r\n      return \"An unknown error occurred while trying to get your location.\";\r\n  }\r\n};","import { useEffect, useState } from \"react\";\r\nimport { getLocationErrorMessage } from \"../utils/locationErrorMessages.js\";\r\n\r\nconst SIGNIFICANT_DISTANCE = 0.005;\r\n\r\n/**\r\n * A hook to get and track the user's location\r\n * @param {function} handleLocationUpdate This handles a users new location\r\n * @returns {{ currentLocation: object, locationError: string }} The user's location and location errors\r\n */\r\n\r\nconst useTrackLocation = (handleLocationUpdate) => {\r\n  const [currentLocation, setCurrentLocation] = useState(null);\r\n  const [locationError, setLocationError] = useState(null);\r\n\r\n useEffect(() => {\r\n   // compare a users new and old location (prevent re-renders)\r\n  const significantLocationChange = (newLocation, oldLocation) => {\r\n    const deltaLat = newLocation.lat - oldLocation.lat;\r\n    const deltaLng = newLocation.lng - oldLocation.lng;\r\n    return (\r\n      deltaLat * deltaLat + deltaLng * deltaLng >\r\n      SIGNIFICANT_DISTANCE * SIGNIFICANT_DISTANCE\r\n    );\r\n  };\r\n\r\n  // check geolocation status\r\n    if (!navigator.geolocation) {\r\n      console.error(\"Geolocation not supported.\");\r\n      setLocationError(\r\n        \"Geolocation is not supported by your browser. Please try a different browser or enable location services.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    // get the user's location \r\n    navigator.geolocation.getCurrentPosition(\r\n      (userPosition) => {\r\n        const newLocation = {\r\n          lat: userPosition.coords.latitude,\r\n          lng: userPosition.coords.longitude,\r\n        };\r\n        if (\r\n          !currentLocation ||\r\n          significantLocationChange(newLocation, currentLocation)\r\n        ) {\r\n          setCurrentLocation(newLocation);\r\n          handleLocationUpdate(userPosition);\r\n          setLocationError(null);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error(\"Error getting location\", error);\r\n        setLocationError(getLocationErrorMessage(error.code));\r\n      }\r\n    );\r\n  }, [currentLocation, handleLocationUpdate]);\r\n\r\n  return { currentLocation, locationError };\r\n};\r\n\r\nexport default useTrackLocation;","import { useCallback, useMemo, useState } from \"react\";\r\nimport { debounce } from \"../utils/debounce.js\";\r\n\r\n/**\r\n * A hook to get stores near the users location\r\n * It provides a loading state for store fetching and error information\r\n * \r\n * @returns {{\r\n * stores: Array,\r\n * storesFetched: boolean,\r\n * fetchNearbyStores: function,\r\n * debouncedFetchNearbyStores: function,\r\n * loading: boolean,\r\n * error: string\r\n * }} contains the states and functions to handle nearby stores\r\n */\r\n\r\n// render backend\r\nconst isDev = window.location.hostname === \"localhost\";\r\nconst BASE_URL = isDev\r\n  ? \"http://localhost:5000\"\r\n  : \"https://guitar-store-locator.onrender.com\";\r\n\r\nconst CACHE_EXPIRATION = 10 * 60 * 1000; // 10 minutes\r\n\r\nconst useNearbyStores = () => {\r\n  const [stores, setStores] = useState([]);\r\n  const [storesFetched, setIsStoresFetched] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // get nearby stores from google\r\n  const fetchGoogleStoresFromAPI = useCallback(async (location, limit = 10) => {\r\n    const storeUrl = `${BASE_URL}/api/nearbyStores?lat=${location.lat}&lng=${location.lng}&limit=${limit}`;\r\n\r\n    try {\r\n      const response = await fetch(storeUrl);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      if (!Array.isArray(data)) {\r\n        console.error(\"Data fetched from API is not an array\");\r\n        return [];\r\n      }\r\n\r\n      const googleResults = data.map((store) => ({\r\n        ...store,\r\n        source: \"google\",\r\n      }));\r\n\r\n      const cacheObject = {\r\n        timestamp: Date.now(),\r\n        data: googleResults,\r\n      };\r\n      localStorage.setItem(\"nearbyStores\", JSON.stringify(cacheObject));\r\n      return googleResults;\r\n    } catch (error) {\r\n      console.error(\"Error fetching data from Google API:\", error);\r\n      setError(error.message);\r\n      return [];\r\n    }\r\n  }, []);\r\n\r\n  // get nearby stores from MongoDB\r\n  const fetchMongoStoresFromAPI = useCallback(\r\n    async (location, maxDistance = 5000) => {\r\n      const mongoStoreUrl = `${BASE_URL}/api/stores/nearby?lat=${location.lat}&lng=${location.lng}&maxDistance=${maxDistance}`;\r\n\r\n      try {\r\n        const response = await fetch(mongoStoreUrl);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        if (!Array.isArray(data)) {\r\n          console.error(\"Data fetched from MongoDB API is not an array\");\r\n          return [];\r\n        }\r\n        // data source\r\n        return data.map((store) => ({ ...store, source: \"mongodb\" }));\r\n      } catch (error) {\r\n        console.error(\"Error fetching data from MongoDB:\", error);\r\n        setError(error.message);\r\n        return [];\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // get nearby stores from Google and MongoDB\r\n  const fetchNearbyStores = useCallback(\r\n    async (location) => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      let googleResults = [];\r\n      const storedData = localStorage.getItem(\"nearbyStores\");\r\n      if (!storedData) {\r\n        googleResults = await fetchGoogleStoresFromAPI(location);\r\n      } else {\r\n        try {\r\n          const cacheObject = JSON.parse(storedData);\r\n          if (\r\n            !cacheObject ||\r\n            !Array.isArray(cacheObject.data) ||\r\n            typeof cacheObject.timestamp !== \"number\"\r\n          ) {\r\n            throw new Error(\"Invalid cache format\");\r\n          }\r\n\r\n          const isExpired =\r\n            Date.now() - cacheObject.timestamp > CACHE_EXPIRATION;\r\n          if (isExpired) {\r\n            googleResults = await fetchGoogleStoresFromAPI(location);\r\n          } else {\r\n            googleResults = cacheObject.data;\r\n          }\r\n        } catch (error) {\r\n          console.error(\r\n            \"Error parsing stored Google data or cache expired:\",\r\n            error\r\n          );\r\n          googleResults = await fetchGoogleStoresFromAPI(location);\r\n        }\r\n      }\r\n\r\n      const mongoResults = await fetchMongoStoresFromAPI(location);\r\n\r\n      const uniqueStores = new Map();\r\n\r\n      // Add MongoDB stores first (prevent google overlap)\r\n      mongoResults.forEach((store) => {\r\n        uniqueStores.set(store.placeId, store);\r\n      });\r\n\r\n      // Add Google stores if place_id not in uniqueStores\r\n      googleResults.forEach((store) => {\r\n        if (!uniqueStores.has(store.place_id)) {\r\n          uniqueStores.set(store.place_id, store);\r\n        }\r\n      });\r\n\r\n      setStores(Array.from(uniqueStores.values()));\r\n      setIsStoresFetched(true);\r\n      setLoading(false);\r\n    },\r\n    [fetchGoogleStoresFromAPI, fetchMongoStoresFromAPI]\r\n  );\r\n\r\n  const debouncedFetchNearbyStores = useMemo(\r\n    () => debounce(fetchNearbyStores, 1000),\r\n    [fetchNearbyStores]\r\n  );\r\n\r\n  return {\r\n    stores,\r\n    storesFetched,\r\n    fetchNearbyStores,\r\n    debouncedFetchNearbyStores,\r\n    loading,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default useNearbyStores;\r\n","export function debounce(func, wait) {\r\n  let timeout;\r\n  return (...args) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGuitar } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst GuitarIcon = () => (\r\n  <FontAwesomeIcon\r\n    icon={faGuitar}\r\n    size=\"3x\"\r\n    style={{\r\n      color: \"#007bff\",\r\n      cursor: \"pointer\",\r\n    }}\r\n  />\r\n);\r\n\r\nexport default GuitarIcon;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPersonRunning } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst UserIcon = () => (\r\n  <FontAwesomeIcon\r\n    icon={faPersonRunning}\r\n    size=\"3x\"\r\n    style={{ color: \"black\", cursor: \"default\" }}\r\n  />\r\n);\r\n\r\nexport default UserIcon;\r\n","export const customClusterRenderer = ({ count, position }) => {\r\n  const div = document.createElement(\"div\");\r\n\r\n  div.style.background = \"#007bff\";\r\n  div.style.color = \"#fff\";\r\n  div.style.borderRadius = \"50%\";\r\n  div.style.padding = \"10px\";\r\n  div.style.width = \"10px\";\r\n  div.style.height = \"10px\";\r\n  div.style.display = \"flex\";\r\n  div.style.alignItems = \"center\";\r\n  div.style.justifyContent = \"center\";\r\n\r\n  div.textContent = count;\r\n\r\n  return new window.google.maps.marker.AdvancedMarkerElement({\r\n    position,\r\n    content: div,\r\n  });\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport GuitarIcon from \"../icons/GuitarIcon.js\";\r\nimport UserIcon from \"../icons/UserIcon.js\";\r\nimport { customClusterRenderer } from \"../utils/customClusterRenderer.js\";\r\nimport { startTransition } from \"react\";\r\n\r\n\r\n/**\r\n * A hook to generate user and store markers on the map\r\n * @param {object} mapRef - keep track of the current maps state\r\n * @param {function} setActiveMarker - handle the state and information of the store being currently clicked\r\n * @returns {{\r\n * loadMarkers: function\r\n * }} An object containing the function that displays all markers on the map\r\n */\r\n\r\nconst loadClusterer = () =>\r\n  import(\"@googlemaps/markerclusterer\").then((mod) => mod.MarkerClusterer);\r\n\r\nconst useMarkers = (mapRef, setActiveMarker) => {\r\n  const loadMarkers = useCallback(\r\n    async (stores, currentLocation) => {\r\n      if (!window.google?.maps || !mapRef.current) {\r\n        console.error(\"Google Maps API is not available.\");\r\n        return;\r\n      }\r\n\r\n      // Clear markers from previous renders\r\n      if (mapRef.current.markers) {\r\n        mapRef.current.markers.forEach((marker) => marker.setMap(null));\r\n      }\r\n\r\n      mapRef.current.markers = [];\r\n\r\n      if (!stores || stores.length === 0) return;\r\n\r\n      // Create markers for nearby stores\r\n      const { AdvancedMarkerElement } = await window.google.maps.importLibrary(\r\n        \"marker\"\r\n      );\r\n\r\n      const storeMarkers = stores.map((store) => {\r\n        const guitarIcon = document.createElement(\"div\");\r\n        createRoot(guitarIcon).render(<GuitarIcon />);\r\n\r\n        // use google or MongoDB data for store location\r\n        let position;\r\n\r\n        if (store.source === \"google\") {\r\n          position = store.geometry.location;\r\n        } else { \r\n          position = {\r\n            lat: store.location.coordinates[1],\r\n            lng: store.location.coordinates[0],\r\n          };\r\n        }\r\n\r\n        const marker = new AdvancedMarkerElement({\r\n          position: position,\r\n          title: store.name,\r\n          content: guitarIcon,\r\n        });\r\n\r\n        // prevent repeat renders of store info\r\n        marker.addListener(\"gmp-click\", () => {\r\n          startTransition(() => {\r\n            setActiveMarker(store);\r\n          });\r\n        });\r\n        return marker;\r\n      });\r\n\r\n      // Cluster nearby stores\r\n      const MarkerClusterer = await loadClusterer();\r\n\r\n      mapRef.current.clusterer = new MarkerClusterer({\r\n        markers: storeMarkers,\r\n        map: mapRef.current,\r\n        renderer: {\r\n          render: customClusterRenderer,\r\n        },\r\n      });\r\n\r\n      // User location marker\r\n      const userIcon = document.createElement(\"div\");\r\n      createRoot(userIcon).render(<UserIcon />);\r\n\r\n      const userMarker = new AdvancedMarkerElement({\r\n        map: mapRef.current,\r\n        position: currentLocation,\r\n        content: userIcon,\r\n      });\r\n\r\n      mapRef.current.markers.push(...storeMarkers, userMarker);\r\n    },\r\n    [mapRef, setActiveMarker]\r\n  );\r\n\r\n  return { loadMarkers };\r\n};\r\n\r\nexport default useMarkers;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StoreErrorMessages = ({ storesFetched, stores, locationError, storesError }) => {\r\n  if (storesFetched && stores.length === 0 && !locationError && !storesError) {\r\n    return (\r\n      <div className=\"no-stores-found-message\">\r\n        No stores found near your location. Try adjusting your location or checking back later.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (storesError) {\r\n    return (\r\n      <div className=\"stores-fetched-error-message\">\r\n        <p>Error fetching stores: {storesError}. Please try again later.</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nStoreErrorMessages.propTypes = {\r\n  storesFetched: PropTypes.bool.isRequired,\r\n  stores: PropTypes.array.isRequired,\r\n  locationError: PropTypes.string,\r\n  storesError: PropTypes.string,\r\n};\r\n\r\nexport default StoreErrorMessages;","import { useState, useCallback, useRef, useEffect, useMemo, lazy } from \"react\";\r\nimport { useJsApiLoader } from \"@react-google-maps/api\";\r\nimport \"../index.css\";\r\nimport useTrackLocation from \"../hooks/useTrackLocation.js\";\r\nimport useNearbyStores from \"../hooks/useNearbyStores.js\";\r\nimport useMarkers from \"../hooks/useMarkers.js\";\r\nimport StoreErrorMessages from \"./StoreErrorMessages.js\";\r\n\r\n// lazy loads\r\nconst MapContainer = lazy(() => import(\"../components/MapContainer.js\"));\r\nconst InfoWindowCard = lazy(() => import(\"../components/InfoWindowCard.js\"));\r\n\r\nconst googleMapsLibraries = [\"places\", \"marker\"];\r\n\r\nconst Maps = () => {\r\n  const loaderOptions = useMemo(\r\n    () => ({\r\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n      libraries: googleMapsLibraries,\r\n      mapId: process.env.REACT_APP_MAP_ID,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const { isLoaded, loadError } = useJsApiLoader(loaderOptions);\r\n  const mapRef = useRef(null);\r\n  const [activeMarker, setActiveMarker] = useState(null);\r\n\r\n  const {\r\n    stores,\r\n    storesFetched,\r\n    fetchNearbyStores,\r\n    debouncedFetchNearbyStores,\r\n    error: storesError,\r\n  } = useNearbyStores();\r\n\r\n  // get nearby stores based on user's location\r\n  const handleLocationUpdate = useCallback(\r\n    (userPosition) => {\r\n      const newLocation = {\r\n        lat: userPosition.coords.latitude,\r\n        lng: userPosition.coords.longitude,\r\n      };\r\n      debouncedFetchNearbyStores(newLocation);\r\n    },\r\n    [debouncedFetchNearbyStores]\r\n  );\r\n  const { currentLocation, locationError } = useTrackLocation(\r\n    handleLocationUpdate\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isLoaded && currentLocation && !storesFetched && !storesError) {\r\n      fetchNearbyStores(currentLocation);\r\n    }\r\n  }, [\r\n    isLoaded,\r\n    currentLocation,\r\n    storesFetched,\r\n    fetchNearbyStores,\r\n    storesError,\r\n  ]);\r\n\r\n  // show stores on map based on user location\r\n  const { loadMarkers } = useMarkers(mapRef, setActiveMarker);\r\n  useEffect(() => {\r\n    if (isLoaded && mapRef.current && stores.length > 0 && currentLocation) {\r\n      loadMarkers(stores, currentLocation);\r\n    }\r\n  }, [isLoaded, stores, currentLocation, loadMarkers]);\r\n\r\n  // pan to user whenever their location changes\r\n  useEffect(() => {\r\n    if (currentLocation && mapRef.current) {\r\n      mapRef.current.panTo(currentLocation);\r\n    }\r\n  }, [currentLocation]);\r\n\r\n  // google maps directions\r\n  const generateDirectionsUrl = useCallback(() => {\r\n    if (\r\n      !activeMarker ||\r\n      !currentLocation ||\r\n      !activeMarker.geometry ||\r\n      !activeMarker.geometry.location\r\n    )\r\n      return \"#\";\r\n    const origin = `${currentLocation.lat},${currentLocation.lng}`;\r\n    const { lat, lng } = activeMarker.geometry.location;\r\n\r\n    return `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${lat},${lng}&destination_place_id=${\r\n      activeMarker.place_id\r\n    }&destination_name=${encodeURIComponent(\r\n      activeMarker.name\r\n    )}&travelmode=driving`;\r\n  }, [activeMarker, currentLocation]);\r\n\r\n  // map loading errors\r\n  if (loadError) return null;\r\n  if (!isLoaded) return null;\r\n\r\n  return (\r\n    <>\r\n       <StoreErrorMessages\r\n      storesFetched={storesFetched}\r\n      stores={stores}\r\n      locationError={locationError}\r\n      storesError={storesError}\r\n    />\r\n      <MapContainer\r\n        mapRef={mapRef}\r\n        currentLocation={currentLocation}\r\n      >\r\n        {activeMarker && (\r\n          <InfoWindowCard\r\n            marker={activeMarker}\r\n            onClose={() => setActiveMarker(null)}\r\n            directionsUrl={generateDirectionsUrl()}\r\n          />\r\n        )}\r\n      </MapContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Maps;\r\n"],"names":["handleLocationUpdate","currentLocation","setCurrentLocation","useState","locationError","setLocationError","useEffect","navigator","geolocation","console","error","getCurrentPosition","userPosition","newLocation","lat","coords","latitude","lng","longitude","significantLocationChange","oldLocation","deltaLat","deltaLng","SIGNIFICANT_DISTANCE","errorCode","getLocationErrorMessage","code","BASE_URL","window","location","hostname","useNearbyStores","stores","setStores","storesFetched","setIsStoresFetched","loading","setLoading","setError","fetchGoogleStoresFromAPI","useCallback","async","limit","arguments","length","undefined","storeUrl","response","fetch","ok","Error","status","data","json","Array","isArray","googleResults","map","store","source","cacheObject","timestamp","Date","now","localStorage","setItem","JSON","stringify","message","fetchMongoStoresFromAPI","maxDistance","mongoStoreUrl","fetchNearbyStores","storedData","getItem","parse","mongoResults","uniqueStores","Map","forEach","set","placeId","has","place_id","from","values","debouncedFetchNearbyStores","useMemo","func","wait","timeout","_len","args","_key","clearTimeout","setTimeout","debounce","GuitarIcon","_jsx","FontAwesomeIcon","icon","faGuitar","size","style","color","cursor","UserIcon","faPersonRunning","customClusterRenderer","_ref","count","position","div","document","createElement","background","borderRadius","padding","width","height","display","alignItems","justifyContent","textContent","google","maps","marker","AdvancedMarkerElement","content","useMarkers","mapRef","setActiveMarker","loadMarkers","_window$google","current","markers","setMap","importLibrary","storeMarkers","guitarIcon","createRoot","render","geometry","coordinates","title","name","addListener","startTransition","MarkerClusterer","then","mod","clusterer","renderer","userIcon","userMarker","push","storesError","className","children","_jsxs","MapContainer","lazy","InfoWindowCard","googleMapsLibraries","Maps","loaderOptions","googleMapsApiKey","process","libraries","mapId","isLoaded","loadError","useJsApiLoader","useRef","activeMarker","useTrackLocation","panTo","generateDirectionsUrl","origin","encodeURIComponent","_Fragment","StoreErrorMessages","onClose","directionsUrl"],"sourceRoot":""}