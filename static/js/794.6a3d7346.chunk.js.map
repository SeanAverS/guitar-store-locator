{"version":3,"file":"static/js/794.6a3d7346.chunk.js","mappings":"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","sources":["components/InfoWindowCard.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\r\n\r\nconst isDev = window.location.hostname === \"localhost\";\r\nconst BASE_URL = isDev\r\n  ? \"http://localhost:5000\"\r\n  : \"https://guitar-store-locator.onrender.com\";\r\n\r\nconst InfoWindowCard = ({ marker, onClose, directionsUrl }) => {\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [saveMessage, setSaveMessage] = useState('');\r\n\r\n  // store in mongoDB \r\n  const handleSaveStore = useCallback(async () => {\r\n    setIsSaving(true);\r\n    setSaveMessage('');\r\n\r\n    try {\r\n      const placeId = marker.place_id || marker.placeId;\r\n      const name = marker.name;\r\n      const address = marker.vicinity || marker.address;\r\n      const phone = marker.formatted_phone_number || marker.phone;\r\n      const website = marker.website;\r\n\r\n      let latitude, longitude;\r\n      if (marker.source === 'google') {\r\n        latitude = marker.geometry.location.lat;\r\n        longitude = marker.geometry.location.lng;\r\n      } else if (marker.source === 'mongodb') {\r\n        latitude = marker.location.coordinates[1];\r\n        longitude = marker.location.coordinates[0];\r\n      } else {\r\n         if (marker.geometry && marker.geometry.location) {\r\n            latitude = marker.geometry.location.lat;\r\n            longitude = marker.geometry.location.lng;\r\n         } else {\r\n            console.error(\"Could not determine coordinates for saving.\");\r\n            setSaveMessage('Error: Could not determine store location.');\r\n            setIsSaving(false);\r\n            return;\r\n         }\r\n      }\r\n\r\n      const postData = {\r\n        placeId,\r\n        name,\r\n        address,\r\n        phone,\r\n        website,\r\n        latitude,\r\n        longitude,\r\n      };\r\n\r\n      const response = await fetch(`${BASE_URL}/api/stores`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(postData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Store saved successfully:', data);\r\n      setSaveMessage('Store saved successfully!');\r\n    } catch (error) {\r\n      console.error('Error saving store:', error);\r\n      if (error.message.includes('Store with this Place ID already exists')) { \r\n        setSaveMessage('This store is already saved!');\r\n      } else {\r\n        setSaveMessage(`Failed to save store: ${error.message || 'Unknown error'}`);\r\n      }\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  }, [marker]);\r\n\r\n  const showSaveButton = marker.source === 'google';\r\n\r\n  return (\r\n    <div className=\"info-window\">\r\n      <button className=\"close-btn\" onClick={onClose}>\r\n        Ã—\r\n      </button>\r\n      <h3>{marker.name}</h3>\r\n      <p>{marker.vicinity || marker.address || \"No address available\"}</p>\r\n      {marker.opening_hours?.open_now !== undefined && (\r\n        <p>\r\n          <strong>Open?</strong>{\" \"}\r\n          {marker.opening_hours.open_now ? \"Yes\" : \"No\"}\r\n        </p>\r\n      )}\r\n      {marker.phone && <p>Phone: {marker.phone}</p>}\r\n      {marker.website && <p><a href={marker.website} target=\"_blank\" rel=\"noopener noreferrer\">Website</a></p>}\r\n\r\n      <a href={directionsUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        Directions\r\n      </a>\r\n\r\n      {showSaveButton && (\r\n        <div>\r\n          <button onClick={handleSaveStore} disabled={isSaving}>\r\n            {isSaving ? 'Saving...' : 'Save to My Stores'}\r\n          </button>\r\n          {saveMessage && <p className=\"save-message\">{saveMessage}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoWindowCard;"],"names":["BASE_URL","window","location","hostname","_ref","_marker$opening_hours","marker","onClose","directionsUrl","isSaving","setIsSaving","useState","saveMessage","setSaveMessage","handleSaveStore","useCallback","async","placeId","place_id","name","address","vicinity","phone","formatted_phone_number","website","latitude","longitude","source","geometry","lat","lng","coordinates","console","error","postData","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","status","data","log","includes","showSaveButton","_jsxs","className","children","_jsx","onClick","undefined","opening_hours","open_now","href","target","rel","disabled"],"sourceRoot":""}