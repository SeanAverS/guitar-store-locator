{"version":3,"file":"static/js/739.bd3dfa11.chunk.js","mappings":"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","sources":["hooks/useTrackLocation.js","hooks/useNearbyStores.js","utils/debounce.js","icons/GuitarIcon.js","icons/UserIcon.js","utils/customClusterRenderer.js","hooks/useMarkers.js","components/Maps.js"],"sourcesContent":["import { useEffect, useCallback, useState } from \"react\";\r\n\r\nconst SIGNIFICANT_DISTANCE = 0.005;\r\n\r\nconst useTrackLocation = (handleLocationUpdate, defaultCenter) => {\r\n  const [currentLocation, setCurrentLocation] = useState(null);\r\n\r\n  // compare a users current location with their previous one\r\n  const significantLocationChange = (newLocation, oldLocation) => {\r\n    const deltaLat = newLocation.lat - oldLocation.lat;\r\n    const deltaLng = newLocation.lng - oldLocation.lng;\r\n    return (\r\n      deltaLat * deltaLat + deltaLng * deltaLng >\r\n      SIGNIFICANT_DISTANCE * SIGNIFICANT_DISTANCE\r\n    );\r\n  };\r\n\r\n  const getUserLocation = useCallback(() => {\r\n    if (!navigator.geolocation) {\r\n      console.error(\"Geolocation not supported.\");\r\n      setCurrentLocation(defaultCenter); // Map.js SF Fallback\r\n      return;\r\n    }\r\n\r\n    // authenticate user's location used in Maps.js\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const newLocation = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        };\r\n        if (\r\n          !currentLocation ||\r\n          significantLocationChange(newLocation, currentLocation)\r\n        ) {\r\n          setCurrentLocation(newLocation);\r\n          handleLocationUpdate(position);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error(\"Error getting location\", error);\r\n        setCurrentLocation(defaultCenter); // Maps.js SF Fallback\r\n      }\r\n    );\r\n  }, [currentLocation, handleLocationUpdate, defaultCenter]);\r\n\r\n  useEffect(() => {\r\n    getUserLocation();\r\n  }, [getUserLocation]);\r\n\r\n  return currentLocation;\r\n};\r\n\r\nexport default useTrackLocation;\r\n","import { useCallback, useMemo, useState } from \"react\";\r\nimport { debounce } from \"../utils/debounce.js\";\r\n\r\nconst useNearbyStores = () => {\r\n  const [stores, setStores] = useState([]);\r\n  const [storesFetched, setIsStoresFetched] = useState(false);\r\n\r\n  // get nearby stores\r\n  const fetchFromAPI = useCallback((location, limit = 10) => {\r\n    const storeUrl = `http://localhost:5000/api/nearbyStores?lat=${location.lat}&lng=${location.lng}&limit=${limit}`;\r\n\r\n    // check existing stores\r\n    fetch(storeUrl)\r\n      .then((response) => {\r\n        if (!response.ok)\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (!Array.isArray(data)) {\r\n          console.error(\"Data fetched from API is not an array\");\r\n        }\r\n\r\n        // fetch successful data\r\n        setStores(data);\r\n        setIsStoresFetched(true);\r\n        localStorage.setItem(\"nearbyStores\", JSON.stringify(data));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data from API:\", error);\r\n      });\r\n  }, []);\r\n\r\n  // authenticate successful data\r\n  const fetchNearbyStores = useCallback(\r\n    (location) => {\r\n      const storedData = localStorage.getItem(\"nearbyStores\");\r\n      if (!storedData) {\r\n        fetchFromAPI(location);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const parsedData = JSON.parse(storedData);\r\n        if (!Array.isArray(parsedData)) {\r\n          throw new Error(\"Stored data is not an array\");\r\n        }\r\n\r\n        // prepare data for Maps.js\r\n        setStores(parsedData);\r\n        setIsStoresFetched(true);\r\n      } catch (error) {\r\n        // retry getting nearby stores\r\n        console.error(\"Error parsing stored data:\", error);\r\n        fetchFromAPI(location);\r\n      }\r\n    },\r\n    [fetchFromAPI]\r\n  );\r\n\r\n  // prevent unnecessary constant api calls\r\n const debouncedFetchNearbyStores = useMemo(\r\n  () => debounce(fetchNearbyStores, 1000),\r\n  [fetchNearbyStores] \r\n);\r\n\r\n  return {\r\n    stores,\r\n    storesFetched,\r\n    fetchNearbyStores,\r\n    debouncedFetchNearbyStores,\r\n  };\r\n};\r\n\r\nexport default useNearbyStores;\r\n","export function debounce(func, wait) {\r\n  let timeout;\r\n  return (...args) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGuitar } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst GuitarIcon = () => (\r\n  <FontAwesomeIcon\r\n    icon={faGuitar}\r\n    size=\"3x\"\r\n    style={{\r\n      color: \"#007bff\",\r\n      cursor: \"pointer\",\r\n    }}\r\n  />\r\n);\r\n\r\nexport default GuitarIcon;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPersonRunning } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst UserIcon = () => (\r\n  <FontAwesomeIcon\r\n    icon={faPersonRunning}\r\n    size=\"3x\"\r\n    style={{ color: \"black\", cursor: \"default\" }}\r\n  />\r\n);\r\n\r\nexport default UserIcon;\r\n","export const customClusterRenderer = ({ count, position }) => {\r\n  const div = document.createElement(\"div\");\r\n\r\n  div.style.background = \"#007bff\";\r\n  div.style.color = \"#fff\";\r\n  div.style.borderRadius = \"50%\";\r\n  div.style.padding = \"10px\";\r\n  div.style.width = \"10px\";\r\n  div.style.height = \"10px\";\r\n  div.style.display = \"flex\";\r\n  div.style.alignItems = \"center\";\r\n  div.style.justifyContent = \"center\";\r\n\r\n  div.textContent = count;\r\n\r\n  return new window.google.maps.marker.AdvancedMarkerElement({\r\n    position,\r\n    content: div,\r\n  });\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport GuitarIcon from \"../icons/GuitarIcon.js\";\r\nimport UserIcon from \"../icons/UserIcon.js\";\r\nimport { customClusterRenderer } from \"../utils/customClusterRenderer.js\";\r\n\r\nconst loadClusterer = () =>\r\n  import(\"@googlemaps/markerclusterer\").then((mod) => mod.MarkerClusterer); \r\n\r\nconst useMarkers = (mapRef, setActiveMarker) => {\r\n  const loadMarkers = useCallback(\r\n    async (stores, currentLocation) => {\r\n      if (!window.google?.maps || !mapRef.current) {\r\n        console.error(\"Google Maps API is not available.\");\r\n        return;\r\n      }\r\n\r\n      // prevent multiple clusters from rendering\r\n      if (mapRef.current.clusterer) {\r\n        mapRef.current.clusterer.clearMarkers();\r\n      }\r\n\r\n      // Clear previous markers\r\n      if (mapRef.current.markers) {\r\n        mapRef.current.markers.forEach((marker) => marker.setMap(null));\r\n      }\r\n\r\n      mapRef.current.markers = [];\r\n\r\n      // Early return for no nearby stores\r\n      if (!stores || stores.length === 0) return;\r\n\r\n      // Create markers for nearby stores\r\n      const { AdvancedMarkerElement } = await window.google.maps.importLibrary(\r\n        \"marker\"\r\n      );\r\n\r\n      const storeMarkers = stores.map((store) => {\r\n        const guitarIcon = document.createElement(\"div\");\r\n        createRoot(guitarIcon).render(<GuitarIcon />);\r\n\r\n        const marker = new AdvancedMarkerElement({\r\n          position: store.geometry.location,\r\n          title: store.name,\r\n          content: guitarIcon,\r\n        });\r\n\r\n        marker.addListener(\"gmp-click\", () => setActiveMarker(store));\r\n        return marker;\r\n      });\r\n\r\n      // Cluster nearby stores\r\n      const MarkerClusterer = await loadClusterer();\r\n\r\n      mapRef.current.clusterer = new MarkerClusterer({\r\n        markers: storeMarkers,\r\n        map: mapRef.current,\r\n        renderer: {\r\n          render: customClusterRenderer,\r\n        },\r\n      });\r\n\r\n      // User location marker\r\n      const userIcon = document.createElement(\"div\");\r\n      createRoot(userIcon).render(<UserIcon />);\r\n\r\n      const userMarker = new AdvancedMarkerElement({\r\n        map: mapRef.current,\r\n        position: currentLocation,\r\n        content: userIcon,\r\n      });\r\n\r\n      mapRef.current.markers.push(...storeMarkers, userMarker);\r\n    },\r\n    [mapRef, setActiveMarker]\r\n  );\r\n\r\n  return { loadMarkers };\r\n};\r\n\r\nexport default useMarkers;\r\n","import { useState, useCallback, useRef, useEffect, useMemo } from \"react\";\r\nimport { useJsApiLoader } from \"@react-google-maps/api\";\r\nimport \"../index.css\";\r\nimport useTrackLocation from \"../hooks/useTrackLocation.js\";\r\nimport useNearbyStores from \"../hooks/useNearbyStores.js\";\r\nimport useMarkers from \"../hooks/useMarkers.js\";\r\nimport { lazy, Suspense } from \"react\";\r\n\r\n// lazy loads\r\nconst MapContainer = lazy(() => import(\"../components/MapContainer.js\")); \r\nconst InfoWindowCard = lazy(() => import(\"../components/InfoWindowCard.js\"));\r\n\r\nconst defaultCenter = { lat: 37.7749, lng: -122.4194 }; // SF fallback\r\nconst googleMapsLibraries = [\"places\", \"marker\"];\r\n\r\nconst Maps = () => {\r\n  const loaderOptions = useMemo(\r\n    () => ({\r\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n      libraries: googleMapsLibraries,\r\n      mapId: process.env.REACT_APP_MAP_ID,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const { isLoaded, loadError } = useJsApiLoader(loaderOptions);\r\n  const mapRef = useRef(null);\r\n  const [activeMarker, setActiveMarker] = useState(null);\r\n\r\n  const {\r\n    stores,\r\n    storesFetched,\r\n    fetchNearbyStores,\r\n    debouncedFetchNearbyStores,\r\n  } = useNearbyStores();\r\n\r\n  // get nearby stores based on user's location\r\n  const handleLocationUpdate = useCallback(\r\n    (position) => {\r\n      const newLocation = {\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude,\r\n      };\r\n      if (!storesFetched) {\r\n        fetchNearbyStores(newLocation);\r\n      } else {\r\n        debouncedFetchNearbyStores(newLocation); // prevent constant fetch calls\r\n      }\r\n    },\r\n    [storesFetched, debouncedFetchNearbyStores, fetchNearbyStores]\r\n  );\r\n  const currentLocation = useTrackLocation(handleLocationUpdate, defaultCenter);\r\n\r\n  // show stores based on user location\r\n  const { loadMarkers } = useMarkers(mapRef, setActiveMarker);\r\n  useEffect(() => {\r\n    if (isLoaded && mapRef.current && stores.length > 0 && currentLocation) {\r\n      loadMarkers(stores, currentLocation);\r\n    }\r\n  }, [isLoaded, stores, currentLocation, loadMarkers]);\r\n\r\n  // pan to user whenever their location changes\r\n  useEffect(() => {\r\n    if (currentLocation && mapRef.current) {\r\n      mapRef.current.panTo(currentLocation);\r\n    }\r\n  }, [currentLocation]);\r\n\r\n  // google maps directions\r\n  const generateDirectionsUrl = useCallback(() => {\r\n    if (!activeMarker || !currentLocation) return \"#\";\r\n    const origin = `${currentLocation.lat},${currentLocation.lng}`;\r\n    const { lat, lng } = activeMarker.geometry.location;\r\n\r\n    return `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${lat},${lng}&destination_place_id=${\r\n      activeMarker.place_id\r\n    }&destination_name=${encodeURIComponent(\r\n      activeMarker.name\r\n    )}&travelmode=driving`;\r\n  }, [activeMarker, currentLocation]);\r\n\r\n  // map loading errors\r\n  if (loadError) return <div>Error loading map</div>;\r\n  if (!isLoaded) return <div>Loading...</div>;\r\n\r\n  return (\r\n    // Map container styling\r\n    <Suspense fallback={<div>Loading Map...</div>}>\r\n      <MapContainer\r\n        mapRef={mapRef}\r\n        currentLocation={currentLocation}\r\n        defaultCenter={defaultCenter} \r\n      >\r\n        {activeMarker && (\r\n          <Suspense fallback={<div>Loading Info...</div>}>\r\n            <InfoWindowCard\r\n              marker={activeMarker}\r\n              onClose={() => setActiveMarker(null)}\r\n              directionsUrl={generateDirectionsUrl()}\r\n            />\r\n          </Suspense>\r\n        )}\r\n      </MapContainer>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default Maps;\r\n"],"names":["useTrackLocation","handleLocationUpdate","defaultCenter","currentLocation","setCurrentLocation","useState","getUserLocation","useCallback","navigator","geolocation","console","error","getCurrentPosition","position","newLocation","lat","coords","latitude","lng","longitude","significantLocationChange","oldLocation","deltaLat","deltaLng","SIGNIFICANT_DISTANCE","useEffect","useNearbyStores","stores","setStores","storesFetched","setIsStoresFetched","fetchFromAPI","location","limit","arguments","length","undefined","storeUrl","fetch","then","response","ok","Error","status","json","data","Array","isArray","localStorage","setItem","JSON","stringify","catch","fetchNearbyStores","storedData","getItem","parsedData","parse","debouncedFetchNearbyStores","useMemo","func","wait","timeout","_len","args","_key","clearTimeout","setTimeout","debounce","GuitarIcon","_jsx","FontAwesomeIcon","icon","faGuitar","size","style","color","cursor","UserIcon","faPersonRunning","customClusterRenderer","_ref","count","div","document","createElement","background","borderRadius","padding","width","height","display","alignItems","justifyContent","textContent","window","google","maps","marker","AdvancedMarkerElement","content","useMarkers","mapRef","setActiveMarker","loadMarkers","async","_window$google","current","clusterer","clearMarkers","markers","forEach","setMap","importLibrary","storeMarkers","map","store","guitarIcon","createRoot","render","geometry","title","name","addListener","MarkerClusterer","mod","renderer","userIcon","userMarker","push","MapContainer","lazy","InfoWindowCard","googleMapsLibraries","Maps","loaderOptions","googleMapsApiKey","process","libraries","mapId","isLoaded","loadError","useJsApiLoader","useRef","activeMarker","panTo","generateDirectionsUrl","origin","place_id","encodeURIComponent","children","Suspense","fallback","onClose","directionsUrl"],"sourceRoot":""}